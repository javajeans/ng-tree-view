{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/directive.compiled.js","ng-tree-view.min.js","src/index.js","src/ng-tree-view.controller.js","src/ng-tree-view.directive.js","src/templates.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","Object","defineProperty","value","$compile","restrict","replace","link","scope","ele","attrs","$watch","compiled","html","contents",2,"global","_interopRequireDefault","obj","__esModule","default","_ngTreeView","_ngTreeView2","_directive","_directive2","_ngTreeView3","_ngTreeView4","angular","window","controller","directive","this","self","./directive.compiled","./ng-tree-view.controller","./ng-tree-view.directive",3,"_templates","_templates2","$scope","$q","templates","_initItem","item","_ngTree","folded","selected","isArray","children","_initItems","items","map","tree","_options","data","options","id","lazy","indicators","extend","unfolded","loading","_lastSelectedItem","shouldLoad","onSelect","d","deer","resolve","promise","itemSelected","then","load","defer","toggleFolding","status","_shouldLoad","hasOwnProperty","./templates",4,"template","element","attributes",5],"mappings":"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","file":"ng-tree-view.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nexport default ($compile) => {\n  'ngInject';\n\n  return {\n    restrict: 'A',\n    replace: true,\n    link: (scope, ele, attrs) => {\n      scope.$watch(attrs.compiled, function (html) {\n        ele.html(html);\n        $compile(ele.contents())(scope);\n      });\n    }\n  };\n}\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function ($compile) {\n  'ngInject';\n\n  return {\n    restrict: 'A',\n    replace: true,\n    link: function link(scope, ele, attrs) {\n      scope.$watch(attrs.compiled, function (html) {\n        ele.html(html);\n        $compile(ele.contents())(scope);\n      });\n    }\n  };\n};\n\n},{}],2:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar _ngTreeView = require('./ng-tree-view.directive');\n\nvar _ngTreeView2 = _interopRequireDefault(_ngTreeView);\n\nvar _directive = require('./directive.compiled');\n\nvar _directive2 = _interopRequireDefault(_directive);\n\nvar _ngTreeView3 = require('./ng-tree-view.controller');\n\nvar _ngTreeView4 = _interopRequireDefault(_ngTreeView3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar angular = (typeof window !== \"undefined\" ? window['angular'] : typeof global !== \"undefined\" ? global['angular'] : null);\n\nangular.module('ngTreeView', []).controller('NgTreeViewController', _ngTreeView4.default).directive('ngTreeView', _ngTreeView2.default).directive('compiled', _directive2.default);\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"./directive.compiled\":1,\"./ng-tree-view.controller\":3,\"./ng-tree-view.directive\":4}],3:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _templates = require('./templates');\n\nvar _templates2 = _interopRequireDefault(_templates);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function ($scope, $q) {\n  'ngInject';\n\n  $scope.templates = _templates2.default;\n\n  $scope._initItem = function (item) {\n    item._ngTree = {\n      folded: true,\n      selected: false\n    };\n\n    if (!angular.isArray(item.children || [])) {\n      item.children = [];\n    }\n\n    return item;\n  };\n\n  $scope._initItems = function (items) {\n    return items.map(function (item) {\n      return $scope._initItem(item);\n    });\n  };\n\n  $scope.tree = $scope._initItems($scope._options.data);\n\n  $scope.options = {\n    id: $scope._options.id || 0,\n    lazy: $scope._options.lazy || false,\n    indicators: angular.extend({\n      folded: \"[+]\",\n      unfolded: \"[-]\",\n      loading: \"[...]\"\n    }, $scope._options.indicators || {})\n  };\n\n  $scope._lastSelectedItem = null;\n\n  $scope.shouldLoad = $scope._options.shouldLoad || function (item) {\n    return true;\n  };\n\n  $scope.onSelect = $scope._options.onSelect || function (item) {\n    var d = $q.deer();\n    d.resolve();\n    return d.promise;\n  };\n\n  $scope.itemSelected = function (item) {\n    $scope.onSelect(item).then(function () {\n      if ($scope._lastSelectedItem) {\n        $scope._lastSelectedItem._ngTree.selected = false;\n      }\n\n      item._ngTree.selected = true;\n      $scope._lastSelectedItem = item;\n    });\n  };\n\n  $scope.load = $scope._options.load || function (item) {\n    var d = $q.defer();\n    d.resolve([]);\n    return d.promise;\n  };\n\n  $scope.toggleFolding = function (item) {\n    // Return if it is already unfolded state\n    if (!item._ngTree.folded) {\n      item._ngTree.folded = true;\n      return;\n    }\n\n    // Return if it is already loaded\n    if (item._ngTree.status === 'loaded') {\n      item._ngTree.folded = !item._ngTree.folded;\n      return;\n    }\n\n    var _shouldLoad = $scope.options.lazy || false;\n\n    if (item._options && item._options.hasOwnProperty('lazy')) {\n      _shouldLoad = item._options.lazy;\n    }\n\n    if (!_shouldLoad) {\n      item._ngTree.folded = !item._ngTree.folded;\n      return;\n    }\n\n    // Starting the lazy load\n    item._ngTree.status = 'loading';\n\n    $scope.load(item).then(function (children) {\n      item.children = $scope._initItems(children);\n      item._ngTree.status = 'loaded';\n      item._ngTree.folded = !item._ngTree.folded;\n    });\n  };\n};\n\n},{\"./templates\":5}],4:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _templates = require('./templates');\n\nvar _templates2 = _interopRequireDefault(_templates);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function () {\n  'ngInject';\n\n  return {\n    template: _templates2.default.tree,\n    scope: {\n      _options: '=ngTreeView'\n    },\n    controller: 'NgTreeViewController',\n    link: function link(scope, element, attributes) {}\n  };\n};\n\n},{\"./templates\":5}],5:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tree = function tree() {\n  return '\\n  <ul>\\n    <li ng-repeat=\"item in tree track by $index\" compiled=\"templates.item\"></li>\\n  </ul>\\n';\n};\n\nvar item = function item() {\n  return '\\n  <div class=\\'ng-tree-item-content\\' ng-class=\"{\\'selected\\': item._ngTree.selected}\">\\n    <span ng-show=\"item._ngTree.status !== \\'loading\\'\">\\n      <span ng-click=\"toggleFolding(item)\" ng-show=\"item._ngTree.folded\" compiled=\"options.indicators.folded\"></span>\\n      <span ng-click=\"toggleFolding(item)\" ng-show=\"!item._ngTree.folded\" compiled=\"options.indicators.unfolded\"></span>\\n    </span>\\n\\n    <span ng-show=\"item._ngTree.status === \\'loading\\'\" compiled=\"options.indicators.loading\"></span>\\n\\n    <a href=\"#\" ng-click=\"itemSelected(item)\">\\n      {{item.name}} [id:{{item.id}}] [children:{{item.children.length}}] [lazy: {{item._options.lazy}}]\\n    </a>\\n  </div>\\n\\n  <ul ng-if=\"!item._ngTree.folded\">\\n    <li ng-repeat=\"item in item.children track by $index\" compiled=\"templates.item\"></li>\\n  </ul>\\n';\n};\n\nexports.default = {\n  item: item(),\n  tree: tree()\n};\n\n},{}]},{},[2])\n\n","'use strict';\n\nvar angular = require('angular');\n\nimport directive from './ng-tree-view.directive';\nimport compiled from './directive.compiled';\nimport controller from './ng-tree-view.controller';\n\nangular\n  .module('ngTreeView', [])\n  .controller('NgTreeViewController', controller)\n  .directive('ngTreeView', directive)\n  .directive('compiled', compiled)\n","'use strict';\n\nimport templates from './templates';\n\nexport default ($scope, $q) => {\n  'ngInject';\n\n  $scope.templates = templates;\n\n  $scope._initItem = (item) => {\n    item._ngTree = {\n      folded: true,\n      selected: false\n    };\n\n    if (!angular.isArray((item.children || []))) {\n      item.children = [];\n    }\n\n    return item;\n  }\n\n  $scope._initItems = (items) => {\n    return items.map((item) => {\n      return $scope._initItem(item);\n    });\n  }\n\n  $scope.tree = $scope._initItems($scope._options.data);\n\n  $scope.options = {\n    id: $scope._options.id || 0,\n    lazy: $scope._options.lazy || false,\n    indicators: angular.extend({\n      folded: \"[+]\",\n      unfolded: \"[-]\",\n      loading: \"[...]\"\n    }, $scope._options.indicators || {})\n  }\n\n  $scope._lastSelectedItem = null;\n\n  $scope.shouldLoad = $scope._options.shouldLoad || ((item) => {\n    return true;\n  })\n\n  $scope.onSelect = $scope._options.onSelect || ((item) => {\n    let d = $q.deer();\n    d.resolve()\n    return d.promise;\n  })\n\n  $scope.itemSelected = (item) => {\n    $scope.onSelect(item)\n      .then(() => {\n        if ($scope._lastSelectedItem) {\n          $scope._lastSelectedItem._ngTree.selected = false;\n        }\n\n        item._ngTree.selected = true;\n        $scope._lastSelectedItem = item;\n      });\n  }\n\n  $scope.load = $scope._options.load || ((item) => {\n    let d = $q.defer();\n    d.resolve([]);\n    return d.promise;\n  })\n\n  $scope.toggleFolding = (item) =>  {\n    // Return if it is already unfolded state\n    if (!item._ngTree.folded) {\n      item._ngTree.folded = true;\n      return;\n    }\n\n    // Return if it is already loaded\n    if (item._ngTree.status === 'loaded') {\n      item._ngTree.folded = !item._ngTree.folded;\n      return;\n    }\n\n    var _shouldLoad = $scope.options.lazy || false;\n\n    if (item._options && item._options.hasOwnProperty('lazy')) {\n      _shouldLoad = item._options.lazy;\n    }\n\n    if (!_shouldLoad) {\n      item._ngTree.folded = !item._ngTree.folded;\n      return;\n    }\n\n    // Starting the lazy load\n    item._ngTree.status = 'loading';\n\n    $scope.load(item)\n      .then((children) => {\n        item.children = $scope._initItems(children);\n        item._ngTree.status = 'loaded';\n        item._ngTree.folded = !item._ngTree.folded;\n      });\n  }\n}\n","'use strict';\n\nimport templates from './templates';\n\nexport default () => {\n  'ngInject';\n\n  return {\n    template: templates.tree,\n    scope: {\n      _options: '=ngTreeView'\n    },\n    controller: 'NgTreeViewController',\n    link: (scope, element, attributes) => {}\n  };\n}\n","'use strict';\n\nconst tree = () => `\n  <ul>\n    <li ng-repeat=\"item in tree track by $index\" compiled=\"templates.item\"></li>\n  </ul>\n`;\n\nconst item = () => `\n  <div class='ng-tree-item-content' ng-class=\"{'selected': item._ngTree.selected}\">\n    <span ng-show=\"item._ngTree.status !== 'loading'\">\n      <span ng-click=\"toggleFolding(item)\" ng-show=\"item._ngTree.folded\" compiled=\"options.indicators.folded\"></span>\n      <span ng-click=\"toggleFolding(item)\" ng-show=\"!item._ngTree.folded\" compiled=\"options.indicators.unfolded\"></span>\n    </span>\n\n    <span ng-show=\"item._ngTree.status === 'loading'\" compiled=\"options.indicators.loading\"></span>\n\n    <a href=\"#\" ng-click=\"itemSelected(item)\">\n      {{item.name}} [id:{{item.id}}] [children:{{item.children.length}}] [lazy: {{item._options.lazy}}]\n    </a>\n  </div>\n\n  <ul ng-if=\"!item._ngTree.folded\">\n    <li ng-repeat=\"item in item.children track by $index\" compiled=\"templates.item\"></li>\n  </ul>\n`;\n\nexport default {\n  item: item(),\n  tree: tree()\n}\n"],"sourceRoot":"/source/"}